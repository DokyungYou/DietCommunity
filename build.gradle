plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.17'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '11'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {


    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'


    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'   // s3


//    implementation 'org.springframework.boot:spring-boot-starter-batch'
//    implementation 'org.springframework.boot:spring-boot-starter-amqp'
//    implementation 'org.springframework.boot:spring-boot-starter-data-elasticsearch'
//    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
//    implementation 'org.springframework.boot:spring-boot-starter-websocket'
//    implementation 'org.springframework.kafka:spring-kafka'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'




    testImplementation 'org.springframework.boot:spring-boot-starter-test'


//    testImplementation 'org.springframework.amqp:spring-rabbit-test'
//    testImplementation 'org.springframework.batch:spring-batch-test'
//    testImplementation 'org.springframework.kafka:spring-kafka-test'


    testImplementation 'org.springframework.security:spring-security-test'
    implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.5'

    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'



    // 테스트코드에서 로깅하기 위함
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'



    // 엔티티가 수정될 때도 compile 을 해주어야함 (우측 Gradle -> Tasks -> other -> compileJava(클릭))
    // QueryDSL JPA
    implementation 'com.querydsl:querydsl-jpa'
    // QFile 생성 및 가져오기
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jpa"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
}


// Qfile이 build 폴더 아래 생겨 import에 문제가 생길때를 위함
sourceSets {
    main {
        java {
            srcDirs = ['src/main/java', buildDir.toString() + '/generated/sources/annotationProcessor/java/main']
        }
    }
}




def querydslSrcDir = 'src/main/generated'
sourceSets {
    main {
        java {
            srcDirs += [ querydslSrcDir ]
        }
    }
}

compileJava {
    options.compilerArgs << '-Aquerydsl.generatedAnnotationClass=javax.annotation.Generated'
}

clean {
    // clean 실행 시 생성된 QClass 삭제
    delete file(querydslSrcDir)
}

tasks.withType(JavaCompile) {
    options.generatedSourceOutputDirectory = file(querydslSrcDir)
}


tasks.named('bootBuildImage') {
    builder = 'paketobuildpacks/builder-jammy-base:latest'
}

tasks.named('test') {
    useJUnitPlatform()
}
